package de.mogwai.common.web.component.layout;

import java.util.Vector;

import javax.faces.context.FacesContext;
import javax.faces.el.ValueBinding;

/**
 * Automatically Generated By JSFCodeGen. DO NOT ALTER ! Generated at Sun Dec 16
 * 11:38:15 CET 2007
 */
public abstract class GridbagLayoutCellComponentBase extends javax.faces.component.UIComponentBase {

    public static final String FAMILY_NAME = "GridbagLayoutFamily";

    public static final String COMPONENT_TYPE = "GridbagLayoutCellComponent";

    public static final String RENDERER_TYPE = "GridbagLayoutCellRenderer";

    protected Integer _x;

    protected Integer _y;

    protected Integer _width;

    protected Integer _height;

    protected String _align;

    protected String _valign;

    @Override
    public String getFamily() {
        return FAMILY_NAME;
    }

    public void setX(Integer aValue) {
        _x = aValue;
    }

    public void setX(int aValue) {
        _x = aValue;
    }

    public int getX() {
        if (_x != null) {
            return _x.intValue();
        }
        ValueBinding theBinding = getValueBinding("x");
        if (theBinding == null) {
            return 1;
        }
        Number theValue = (Number) theBinding.getValue(getFacesContext());
        if (theValue == null) {
            return 1;
        }
        return theValue.intValue();
    }

    public void setY(Integer aValue) {
        _y = aValue;
    }

    public void setY(int aValue) {
        _y = aValue;
    }

    public int getY() {
        if (_y != null) {
            return _y.intValue();
        }
        ValueBinding theBinding = getValueBinding("y");
        if (theBinding == null) {
            return 1;
        }
        Number theValue = (Number) theBinding.getValue(getFacesContext());
        if (theValue == null) {
            return 1;
        }
        return theValue.intValue();
    }

    public void setWidth(Integer aValue) {
        _width = aValue;
    }

    public void setWidth(int aValue) {
        _width = aValue;
    }

    public int getWidth() {
        if (_width != null) {
            return _width.intValue();
        }
        ValueBinding theBinding = getValueBinding("width");
        if (theBinding == null) {
            return 1;
        }
        Number theValue = (Number) theBinding.getValue(getFacesContext());
        if (theValue == null) {
            return 1;
        }
        return theValue.intValue();
    }

    public void setHeight(Integer aValue) {
        _height = aValue;
    }

    public void setHeight(int aValue) {
        _height = aValue;
    }

    public int getHeight() {
        if (_height != null) {
            return _height.intValue();
        }
        ValueBinding theBinding = getValueBinding("height");
        if (theBinding == null) {
            return 1;
        }
        Number theValue = (Number) theBinding.getValue(getFacesContext());
        if (theValue == null) {
            return 1;
        }
        return theValue.intValue();
    }

    public void setAlign(String aValue) {
        _align = aValue;
    }

    public String getAlign() {
        if (_align != null) {
            return _align;
        }
        ValueBinding theBinding = getValueBinding("align");
        if (theBinding == null) {
            return null;
        }
        String theValue = (String) theBinding.getValue(getFacesContext());
        if (theValue == null) {
            return null;
        }
        return theValue;
    }

    public void setValign(String aValue) {
        _valign = aValue;
    }

    public String getValign() {
        if (_valign != null) {
            return _valign;
        }
        ValueBinding theBinding = getValueBinding("valign");
        if (theBinding == null) {
            return "top";
        }
        String theValue = (String) theBinding.getValue(getFacesContext());
        if (theValue == null) {
            return "top";
        }
        return theValue;
    }

    @Override
    public Object saveState(FacesContext aContext) {
        Vector<Object> theResult = new Vector<Object>();
        theResult.add(super.saveState(aContext));
        theResult.add(_x);
        theResult.add(_y);
        theResult.add(_width);
        theResult.add(_height);
        theResult.add(_align);
        theResult.add(_valign);
        return theResult.toArray();
    }

    @Override
    public void restoreState(FacesContext aContext, Object aState) {
        Object[] theResult = (Object[]) aState;
        super.restoreState(aContext, theResult[0]);
        _x = (Integer) theResult[1];
        _y = (Integer) theResult[2];
        _width = (Integer) theResult[3];
        _height = (Integer) theResult[4];
        _align = (String) theResult[5];
        _valign = (String) theResult[6];
    }
}
